<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnet (.Net) on devNotes</title>
    <link>https://vinceumo.github.io/devNotes/Dotnet/</link>
    <description>Recent content in Dotnet (.Net) on devNotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 07 Nov 2018 13:21:02 +0000</lastBuildDate>
    
	<atom:link href="https://vinceumo.github.io/devNotes/Dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C# - Practice | katas</title>
      <link>https://vinceumo.github.io/devNotes/Dotnet/c-practice-katas/</link>
      <pubDate>Wed, 15 May 2019 23:00:00 +0000</pubDate>
      
      <guid>https://vinceumo.github.io/devNotes/Dotnet/c-practice-katas/</guid>
      <description>Write Number in Expanded Form Codewars
 You will be given a number and you will need to return it as a string in Expanded Form. For example:
 Kata.ExpandedForm(12); # Should return &amp;#34;10 + 2&amp;#34; Kata.ExpandedForm(42); # Should return &amp;#34;40 + 2&amp;#34; Kata.ExpandedForm(70304); # Should return &amp;#34;70000 + 300 + 4&amp;#34;  Solution using System; namespace test { class Kata { static void Main(string[] args) { Console.WriteLine(ExpandedForm(12)); Console.WriteLine(ExpandedForm(42)); Console.</description>
    </item>
    
    <item>
      <title>C# - 101 cheat sheet</title>
      <link>https://vinceumo.github.io/devNotes/Dotnet/c-101-cheat-sheet/</link>
      <pubDate>Tue, 14 May 2019 23:00:00 +0000</pubDate>
      
      <guid>https://vinceumo.github.io/devNotes/Dotnet/c-101-cheat-sheet/</guid>
      <description>Introduction C# is an objected oriented language that runs on Microsoft&amp;rsquo;s .NET Framework, C# can as well be run on other frameworks (E.g. Unity)
.NET is an open source platform to develop application
Set up dotnet core Install In this article, I will use .NET core 2.2 but you can use the latest version if available. .NET core can be run on Windows, Linux and macOS.
You can install the dotnet core SDK from Microsoft</description>
    </item>
    
    <item>
      <title>C# - Practice | Basic exercises </title>
      <link>https://vinceumo.github.io/devNotes/Dotnet/c-practice/</link>
      <pubDate>Sat, 11 May 2019 23:00:00 +0000</pubDate>
      
      <guid>https://vinceumo.github.io/devNotes/Dotnet/c-practice/</guid>
      <description>C# Sharp Basic Declarations and Expressions : Exercises, Practice, Solution Exercices link
Exercise 1 Write a C# Sharp program to print Hello and your name in a separate line.
Expected Output :
 Hello Alexandra Abramov  class Program { static void Main(string[] args) { Console.WriteLine(&amp;#34;Hello&amp;#34;); Console.WriteLine(&amp;#34;Vince&amp;#34;); } }  Edit in repl
Exercise 2 Write a C# Sharp program to print the sum of two numbers
class Program { static void Main(string[] args) { int a = 39; int b = 73; Console.</description>
    </item>
    
    <item>
      <title>Set up SignalR in a vue.js project</title>
      <link>https://vinceumo.github.io/devNotes/Dotnet/signalR/</link>
      <pubDate>Mon, 29 Oct 2018 16:50:00 +0000</pubDate>
      
      <guid>https://vinceumo.github.io/devNotes/Dotnet/signalR/</guid>
      <description>SignalR is an ASP.NET library for real-time applications. It uses the WebSockets API:
 The WebSocket API is an advanced technology that makes it possible to open a two-way interactive communication session between the user&amp;rsquo;s browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply. The WebSocket API (WebSockets) - MDN
 SignalR comes pre instal with ASP.</description>
    </item>
    
  </channel>
</rss>